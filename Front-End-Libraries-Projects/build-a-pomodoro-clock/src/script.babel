function App() {
  const [sessionLength, setSessionLength] = React.useState(25);
  const [breakLength, setBreakLength] = React.useState(5);
  const[timeLeft, setTimeLeft] = React.useState((sessionLength * 60));
  const [onBreak, setOnBreak] = React.useState(false);
  const [running, setRunning] = React.useState(false);
  
   
  const  format = (time)=>{
    let min = Math.trunc(time / 60);
    let sec = time % 60;
    if(sec < 10){
      sec = "0"+sec;
    }
    if(min < 10){
      min = "0"+min;
    }
    return min +":" +sec;
  }

  const reset =()=>{
    setRunning (false);
    setSessionLength(25);
    setBreakLength(5);
    setOnBreak(false);
    setTimeLeft(25*60);
    
  }

  const labelHanlder = (command)=>{
    
    if(command =="session-increment"){
      if(sessionLength < 60){
        setSessionLength(sessionLength+1);
        setTimeLeft((sessionLength+1)*60)
      }
    }
    if(command == "session-decrement"){
      if(sessionLength > 1){
        setSessionLength(sessionLength-1);
        setTimeLeft((sessionLength-1)*60)
      }
    }
    if(command =="break-increment"){
      if(breakLength < 60)
        setBreakLength(breakLength+1);
    }
    if(command == "break-decrement"){
      if(breakLength > 1)
        setBreakLength(breakLength-1);
    } 
    if(onBreak){
      setTimeLeft(sessionLength)
    }
  }
  
  const start_stop = () =>{
  setRunning (!running);
  }
  
 React.useEffect(() => {
    let interval = null;
    if (running && timeLeft !== 0 ) {
      interval = setInterval(() => {
        setTimeLeft(timeLeft => timeLeft - 1);
      }, 1000);
    } else if (!running && timeLeft !== 0) {
      clearInterval(interval);
    } else if (running && timeLeft == 0 && !onBreak){
      setOnBreak(true);
      setTimeLeft(breakLength*60);
    } else if (running && timeLeft == 0 && onBreak){
      setOnBreak(false);
      setTimeLeft(sessionLength*60);
    }
    
    return () => clearInterval(interval);
  }, [running, timeLeft]);

  
  
  return(

    <main>
    
      <h1>Pomodoro Clock</h1>
      <div id ="break-session-container">
  <div id="break-label">
     <a id="break-increment"  onClick={()=> !running ? labelHanlder("break-increment"): null}>+</a>
    <p id="break-length" >{breakLength}</p>
      <a id="break-decrement" onClick={()=> !running ?labelHanlder("break-decrement"): null}>-</a>
  </div>
  <div id="session-label">
     <a id="session-increment" onClick={()=> !running ?labelHanlder("session-increment"): null}>+</a>
    <p id="session-length">{sessionLength}</p>
      <a id="session-decrement" onClick={()=> !running ? labelHanlder("session-decrement"):null}>-</a>
  </div>
      </div>
  <div id="timer-container">
    <h5 id="timer-label">{onBreak ? "Break" : "Session"}</h5>
    <h1 id="time-left">{format(timeLeft)}</h1>
      
  </div>
      <div id="controler">
        <button id="start_stop" onClick={start_stop}>start_stop</button>
        <button id="reset" onClick={reset}>reset</button>
      </div>
     
    </main>
  );
}

ReactDOM.render(<App/>, document.getElementById('root'));

